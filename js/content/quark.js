//Setups the most basic Quark funtionality
function setupbasicquarkstage(){
    player.quarkstage.quarks = new Currency("quark", "Quarks", 10);
}

//Setup the producers for quarks
function setupquarkproducers(){
    player.quarkstage.producers = [];
    player.quarkstage.producers.push(new Producer("quarkgenone",     "Charger",       new ExponentialCost(player.quarkstage.quarks, "10", 1.07),    new LinearProduction(player.quarkstage.quarks, "1")  ,    null ,                                          "qp", [new AchievementRequirement("1e3quarkgenone")]));
    player.quarkstage.producers.push(new Producer("quarkgentwo",     "Spinner",       [new ExponentialCost(player.quarkstage.quarks, "100", 1.07)],   [new LinearProduction(player.quarkstage.quarks, "9")]  ,    [new AchievementRequirement("10quarkgenone")],  "qp", [new AchievementRequirement("1e3quarkgentwo")]));
    player.quarkstage.producers.push(new Producer("quarkgenthree",   "Flipper",       [new ExponentialCost(player.quarkstage.quarks, "1500", 1.07)],  [new LinearProduction(player.quarkstage.quarks, "100")],    [new AchievementRequirement("10quarkgentwo")],  "qp", [new AchievementRequirement("1e3quarkgenthree")]));
    player.quarkstage.producers.push(new Producer("quarkgenfour",    "Charmer",       [new ExponentialCost(player.quarkstage.quarks, "40000", 1.07)], [new LinearProduction(player.quarkstage.quarks, "2000")],   [new AchievementRequirement("10quarkgenthree")],"qp", [new AchievementRequirement("1e3quarkgenfour")]));
    player.quarkstage.producers.push(new Producer("quarkgenfive",    "Eightfold Way", [new ExponentialCost(player.quarkstage.quarks, "2e6", 1.07)],   [new LinearProduction(player.quarkstage.quarks, "50000")],  [new AchievementRequirement("10quarkgenfour")], "qp", [new AchievementRequirement("1e3quarkgenfive")]));
    player.quarkstage.producers.push(new Producer("quarkgensix",     "George",        [new ExponentialCost(player.quarkstage.quarks, "1e8", 1.07)],   [new LinearProduction(player.quarkstage.quarks, "2e6")],    [new AchievementRequirement("10quarkgenfive")], "qp", [new AchievementRequirement("1e3quarkgensix")]));
    player.quarkstage.producers.push(new Producer("quarkgenseven",   "Murray",        [new ExponentialCost(player.quarkstage.quarks, "1e10", 1.07)],  [new LinearProduction(player.quarkstage.quarks, "1e8")],    [new AchievementRequirement("10quarkgensix")],  "qp", [new AchievementRequirement("1e3quarkgenseven")]));
    player.quarkstage.producers.push(new Producer("quarkgeneight",   "Epoch",         [new ExponentialCost(player.quarkstage.quarks, "1e12", 1.07)],  [new LinearProduction(player.quarkstage.quarks, "8e9")],    [new AchievementRequirement("10quarkgenseven")],"qp", [new AchievementRequirement("1e3quarkgeneight")]));
    player.quarkstage.producers.push(new Producer("quarkgennine",    "Scattering",    [new ExponentialCost(player.quarkstage.quarks, "1e14", 1.07)],  [new LinearProduction(player.quarkstage.quarks, "5e11")],   [new AchievementRequirement("10quarkgeneight")],"qp", [new AchievementRequirement("1e3quarkgennine")]));
    player.quarkstage.producers.push(new Producer("quarkgenten",     "Big Bang",      [new ExponentialCost(player.quarkstage.quarks, "1e17", 1.07)],  [new LinearProduction(player.quarkstage.quarks, "5e13")],   [new AchievementRequirement("10quarkgennine")], "qp", [new AchievementRequirement("1e3quarkgenten")]));  
}

//Setup the infinitely buyable quark upgrades in producers tab
function setupbasicquarkupgrades(){
    player.quarkstage.upgrades = [];
    //Acceleron Tree
    player.quarkstage.upgrades.push(new Upgrade("qu0", "Acceleron",           -1, [new AchievementRequirement("100quarkgenone")], [new LinearEffect(player.quarkstage.producers, 1, .1, EffectTypes.ProducerMultiplierProduction, null, (obj) => {return "Acceleron Power: +" + formatDecimalOverride(obj.increase, 2) + " || Quark Gain: x" + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,100,1.5)], "qbp", new AchievementRequirement("quarkupgradesauto")));
    player.quarkstage.upgrades.push(new Upgrade("qu1", "Accelerator",         -1, [new AchievementRequirement("100quarkgennine")],            [new LinearEffect(player.quarkstage.upgrades[0], 1, .01, EffectTypes.UpgradeIncreaseMultiplier, null, (obj) => {return "Accelerator Power: +" + formatDecimalOverride(obj.increase, 2) + " || Acceleron Power: x" + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e5,5)], "qbp", new AchievementRequirement("quarkupgradesauto")));
    player.quarkstage.upgrades.push(new Upgrade("qu2", "Acceleratron",        -1, [new AchievementRequirement("quarkupgradesunlock")],            [new LinearEffect(player.quarkstage.upgrades[1], 1, .01, EffectTypes.UpgradeIncreaseMultiplier, null, (obj) => {return "Acceleratron Power: +" + formatDecimalOverride(obj.increase, 2) + " || Accelerator Power: x" + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e25,25)], "qbp", new AchievementRequirement("quarkupgradesauto")));
    player.quarkstage.upgrades.push(new Upgrade("qu3", "Acceleration",        -1, [new AchievementRequirement("imp")],            [new LinearEffect(player.quarkstage.upgrades[2], 1, .01, EffectTypes.UpgradeIncreaseMultiplier, null, (obj) => {return "Acceleration Power: +" + formatDecimalOverride(obj.increase, 2) + " || Acceleratron Power: x" + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e10,15)], "qbp", new AchievementRequirement("quarkupgradesauto")));
    player.quarkstage.upgrades.push(new Upgrade("qu4", "Acceleration Boost",  -1, [new AchievementRequirement("100quarkgenfive")],[new LinearEffect(player.quarkstage.upgrades[0], 0, 5, EffectTypes.UpgradeBonusLevels, null, (obj) => {return "Acceleration Boost Power: +" + formatDecimalOverride(obj.increase, 2) + " || Free Accelerons: " + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e12,100)], "qbp", new AchievementRequirement("quarkupgradesauto")));
    //Multor Tree
    player.quarkstage.upgrades.push(new DiminishingUpgrade("qu5", "Multor", -1, [new AchievementRequirement("100quarkgentwo")], [new ExponentialEffect(player.quarkstage.producers, 1, 1.1, EffectTypes.ProducerMultiplierProduction, null, (obj) => {return "Multor Power: x" + formatDecimalOverride(obj.increase, 2) + " || Quark Gain: x" + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e5,10)], "qbp", new Decimal(1000), (num) => {return Decimal.pow(num,.5)}, new AchievementRequirement("quarkupgradesauto")));
    player.quarkstage.upgrades.push(new DiminishingUpgrade("qu6", "Multron", -1, [new AchievementRequirement("multronunlock")], [new LinearEffect(player.quarkstage.upgrades[5], 1, .01, EffectTypes.UpgradeIncreaseMultiplier, null, (obj) => {return "Multron Power: +" + formatDecimalOverride(obj.increase, 2) + " || Multor Power: x" + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e40,15)], "qbp", new Decimal(1000), (num) => {return Decimal.pow(num,.25)}, new AchievementRequirement("quarkupgradesauto")));
    player.quarkstage.upgrades.push(new DiminishingUpgrade("qu7", "Multiplier", -1, [new AchievementRequirement("quarkupgradesunlock")], [new LinearEffect(player.quarkstage.upgrades[6], 1, .001, EffectTypes.UpgradeIncreaseMultiplier, null, (obj) => {return "Mutiplier Power: +" + formatDecimalOverride(obj.increase, 3) + " || Multron Power: x" + formatDecimalOverride(obj.value, 3)})], [new ExponentialCost(player.quarkstage.quarks,1e80,1e4)], "qbp", new Decimal(1000), (num) => {return Decimal.pow(num,.25)}, new AchievementRequirement("quarkupgradesauto")));
    player.quarkstage.upgrades.push(new DiminishingUpgrade("qu8", "Multiplication", -1, [new AchievementRequirement("imp")], [new LinearEffect(player.quarkstage.upgrades[7], 1, .01, EffectTypes.UpgradeIncreaseMultiplier, null, (obj) => {return "Multiplication Power: +" + formatDecimalOverride(obj.increase, 2) + " || Multiplier Power: x" + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e120,250)], "qbp", new Decimal(1000), (num) => {return Decimal.pow(num,.25)}, new AchievementRequirement("quarkupgradesauto")));
    player.quarkstage.upgrades.push(new DiminishingUpgrade("qu9", "Multiplication Boost", -1, [new AchievementRequirement("100quarkgenten")], [new LinearEffect(player.quarkstage.upgrades[5], 0, 5, EffectTypes.UpgradeBonusLevels, null, (obj) => {return "Multiplication Boost Power: +" + formatDecimalOverride(obj.increase, 2) + " || Free Multors: " + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e16,1000)], "qbp", new Decimal(1000), (num) => {return Decimal.pow(num,.25)}, new AchievementRequirement("quarkupgradesauto")));
}

//Setup most basic quark singleton upgrades
function setupbasicquarksingletonupgrades(){
    player.quarkstage.singletonupgrades = [];
    function boughtmult() 
    {
      var val = Decimal.pow(totalproducerbought(player.quarkstage.producers).add(1), .9);
      return val;
    }
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu0", "[q1] Increase Charger production based on Quark Producers bought",        1, null, [new FunctionEffect(player.quarkstage.producers[0], EffectTypes.ProducerMultiplierProduction, () => boughtmult(), (obj) => "Charger Production x"       + formatDecimalNormal(obj.value))], [new StaticCost(player.quarkstage.quarks, "1e6")] , "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu1", "[q2] Increase Spinner production based on Quark Producers bought",        1, null, [new FunctionEffect(player.quarkstage.producers[1], EffectTypes.ProducerMultiplierProduction, () => boughtmult(), (obj) => "Spinner Production x"       + formatDecimalNormal(obj.value))], [new StaticCost(player.quarkstage.quarks, "1e8")] , "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu2", "[q3] Increase Flipper production based on Quark Producers bought",        1, null, [new FunctionEffect(player.quarkstage.producers[2], EffectTypes.ProducerMultiplierProduction, () => boughtmult(),  (obj) => "Flipper Production x"      + formatDecimalNormal(obj.value))], [new StaticCost(player.quarkstage.quarks, "1e10")], "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu3", "[q4] Increase Charmer production based on Quark Producers bought",        1, null, [new FunctionEffect(player.quarkstage.producers[3], EffectTypes.ProducerMultiplierProduction, () => boughtmult(), (obj) => "Charmer Production x"       + formatDecimalNormal(obj.value))], [new StaticCost(player.quarkstage.quarks, "1e12")], "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu4", "[q5] Increase Eightfold way production based on Quark Producers bought",  1, null, [new FunctionEffect(player.quarkstage.producers[4], EffectTypes.ProducerMultiplierProduction, () => boughtmult(), (obj) => "Eightfold Way Production x" + formatDecimalNormal(obj.value))], [new StaticCost(player.quarkstage.quarks, "1e14")], "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu5", "[q6] Increase George production based on Quark Producers bought",         1, null, [new FunctionEffect(player.quarkstage.producers[5], EffectTypes.ProducerMultiplierProduction, () => boughtmult(), (obj) => "George Production x"        + formatDecimalNormal(obj.value))], [new StaticCost(player.quarkstage.quarks, "1e16")], "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu6", "[q7] Increase Murray production based on Quark Producers bought",         1, null, [new FunctionEffect(player.quarkstage.producers[6], EffectTypes.ProducerMultiplierProduction, () => boughtmult(), (obj) => "Murray Production x"        + formatDecimalNormal(obj.value))], [new StaticCost(player.quarkstage.quarks, "1e18")], "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu7", "[q8] Increase Epoch production based on Quark Producers bought",          1, null, [new FunctionEffect(player.quarkstage.producers[7], EffectTypes.ProducerMultiplierProduction, () => boughtmult(), (obj) => "Epoch Production x"         + formatDecimalNormal(obj.value))], [new StaticCost(player.quarkstage.quarks, "1e20")], "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu8", "[q9] Increase Scattering production based on Quark Producers bought",     1, null, [new FunctionEffect(player.quarkstage.producers[8], EffectTypes.ProducerMultiplierProduction, () => boughtmult(), (obj) => "Scattering Production x"    + formatDecimalNormal(obj.value))], [new StaticCost(player.quarkstage.quarks, "1e22")], "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu9", "[q10] Increase Big Bang production based on Quark Producers bought",      1, null, [new FunctionEffect(player.quarkstage.producers[9], EffectTypes.ProducerMultiplierProduction, () => boughtmult(), (obj) => "Big Bang Production x"      + formatDecimalNormal(obj.value))], [new StaticCost(player.quarkstage.quarks, "1e24")], "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu10", "[q11] Acceleron is 1.25(+.03/level) times as powerful", 25, null, [new LinearEffect(player.quarkstage.upgrades[0], 1.25, .03, EffectTypes.UpgradeIncreaseMultiplier, null, (obj) => "Acceleron Power x" + formatDecimalOverride(obj.value, 2))], [new ExponentialCost(player.quarkstage.quarks, "1e25", "10")], "upg"));
    function valuemult(amount){
      if(amount.equals(0))
        return new Decimal(1);
      return Decimal.pow(Decimal.log(amount,10), 2).divide(10).add(1);
    }
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu11", "[q12] Boost Quark production based on Quarks generated this Electrify", 5, null, [new FunctionEffect(player.quarkstage.producers, EffectTypes.ProducerMultiplierProduction, (amount) => valuemult(Decimal.pow(player.quarkstage.quarks.gained, (new Decimal(1).add(amount.divide(5))))), (obj) => "Quark production x" + formatDecimalNormal(obj.value))], [new ExponentialCost(player.quarkstage.quarks, "1e27", "4e6")], "upg"));
    function productionmult(amount){
      return Decimal.pow(amount, 1/2);
    }
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu12", "[q13] All Accelerons boost Quark production.", 1, null, [new FunctionEffect(player.quarkstage.producers, EffectTypes.ProducerMultiplierProduction, () => productionmult(player.quarkstage.upgrades[0].amount), (obj) => "Quark production x" + formatDecimalNormal(obj.value))], [new StaticCost(player.quarkstage.quarks, "1e30")], "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu13", "[q14] Get 15 free Accelerons per bought Multor.", 1, null, [new LinkedLinearEffect(player.quarkstage.upgrades[0], () => Decimal.floor(player.quarkstage.upgrades[5].bought),0,15, EffectTypes.UpgradeBonusLevels, null, (obj) => formatDecimalNormal(obj.value) + " Free Accelerons")], [new StaticCost(player.quarkstage.quarks, "1e35")], "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu14", "[q15] Get a free Multor per 15 bought Accelerons.", 1, null, [new LinkedLinearEffect(player.quarkstage.upgrades[5], () => Decimal.floor(player.quarkstage.upgrades[0].bought.divide(15)),0,1, EffectTypes.UpgradeBonusLevels, null, (obj) => formatDecimalNormal(obj.value) + " Free Multors")], [new StaticCost(player.quarkstage.quarks, "1e40")], "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu15", "[q16] Increase Quark production based on Quark Producers bought",      1, null, [new FunctionEffect(player.quarkstage.producers, EffectTypes.ProducerMultiplierProduction, () => boughtmult(), (obj) => "Quark Production x" + formatDecimalNormal(obj.value))], [new StaticCost(player.quarkstage.quarks, "1e50")], "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu16", "[q17] Quark Production +.01, Electron gain +.001, +.00001 More free Accelerons/Multors", "1e4", null, [new LinearEffect(player.quarkstage.producers, 1, .01, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Quark Production x" + formatDecimalOverride(obj.value, 2)),new LinearEffect(player.quarkstage.electrify, 1, "1e-3", EffectTypes.PrestigeMultiplicativeGain, null, (obj) => "Electron Gain x" + formatDecimalOverride(obj.value, 3)),new LinearEffect(player.quarkstage.upgrades[0], 1, "1e-5", EffectTypes.UpgradeBonusLevelMultiplier, null, (obj) => "Acceleron/Multor Free Levels x" + formatDecimalOverride(obj.value, 5)),new LinearEffect(player.quarkstage.upgrades[5], 1, "1e-5", EffectTypes.UpgradeBonusLevelMultiplier, null, undefined)], [new ExponentialCost(player.quarkstage.quarks, "1e60", "1.01")], "upg", null, {showall: true}));
}

//Quark singleton upgrades needed after electron setup
function setupstage2quarksingletonupgrades(){
    //And Yep Now I need to add Quark upgrades down here
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu17", "[q18] Increase Quark Spin Production * 1(+.05/level)", 80, null, [new LinearEffect(player.electronstage.quarkspinproducers, 1,.05,EffectTypes.ProducerMultiplierProduction, null, (obj) => "Quark Spin production *" + formatDecimalOverride(obj.value,2))], [new StaticCost(player.quarkstage.quarks, "1e60")], "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu18", "[q19] Quark Spin multiplier is slightly better.", "1", null, [new StaticEffect(player.electronstage.quarkspin, 1.2, EffectTypes.UpgradeValuePower, null, () => "Quark Spin Multiplier ^1.2")], [new StaticCost(player.quarkstage.quarks, "1e75")], "upg"));

    function timebonus(amount){
      return new Decimal(amount);
    }
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu19", "[q20] Quark Production Multiplier based on time this electrify.", "1", null, [new FunctionEffect(player.quarkstage.producers, EffectTypes.ProducerMultiplierProduction, () => timebonus(player.stats?.times ? Date.now() -  player.stats?.times["electrify"] : 1), (obj) => "Quark Gain *" + formatDecimalOverride(obj.value,2))], [new StaticCost(player.quarkstage.quarks, "1e100")], "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu20", "[q21] Increase Effective Multor Amount", "100", null, [new LinearEffect(player.quarkstage.upgrades[5], 1.00, .001, EffectTypes.UpgradeAmountMultiplier, null, (obj) => "Multor Amount *" + formatDecimalOverride(obj.value, 3) + "(+" + formatDecimalOverride(obj.increase, 3) + ")")], [new ExponentialCost(player.quarkstage.quarks, "1e150", "100")], "upg"));

    //The New Stage Upgrades
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu21", "[q22] Buff dem Accelerons", 2500, [new AchievementRequirement("1nucleonize")], new ExponentialEffect(player.quarkstage.upgrades[0], 1, 1.01, EffectTypes.UpgradeIncreaseMultiplier, null, (obj) => "Acceleron Power x" + formatDecimal(obj.value) + "(x" + formatDecimal(obj.increase) + ")"), new ExponentialCost(player.quarkstage.quarks, 1e100, 1e5), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu22", "[q23] Buff dem Mutlor", 2500, [new AchievementRequirement("1nucleonize")], new LinearEffect(player.quarkstage.upgrades[4], 1, .0001, EffectTypes.UpgradeIncreaseMultiplier, null, (obj) => "Multor Power x" + formatDecimalOverride(obj.value, 4) + "(x" + formatDecimalOverride(obj.increase, 4) + ")"), new ExponentialCost(player.quarkstage.quarks, 1e150, 1e5), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu23", "[q24] Get some more quarks", 2500, [new AchievementRequirement("1nucleonize")], new ExponentialEffect(player.quarkstage.producers, 1, 1.01, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Quark Production x" + formatDecimal(obj.value) + "(x" + formatDecimal(obj.increase) + ")"), new ExponentialCost(player.quarkstage.quarks, 1e300, 1e5), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu24", "[q25] Get some more quark spin", 2500, [new AchievementRequirement("1nucleonize")], new ExponentialEffect(player.quarkstage.producers, 1, 1.01, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Quark Spin Production x" + formatDecimal(obj.value) + "(x" + formatDecimal(obj.increase) + ")"), new ExponentialCost(player.quarkstage.quarks, 1e300, 1e5), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu25", "[q26] Electrons Babiiiii!", 2500, [new AchievementRequirement("1nucleonize")], new ExponentialEffect(player.quarkstage.electrify, 1, 1.01, EffectTypes.PrestigeMultiplicativeGain, null, (obj) => "Electron Gain x" + formatDecimal(obj.value) + "(x" + formatDecimal(obj.increase) + ")"), new ExponentialCost(player.quarkstage.quarks, "1e350", 1e5), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu26", "[q27] Get that score up", 250, [new AchievementRequirement("1nucleonize")], [new ExponentialEffect([player.challenges[0], player.challenges[1], player.challenges[2], player.challenges[3]], 1, 1.05, EffectTypes.ChallengeScoreMult, null, (obj) => "Challenges 1-4 Score x" + formatDecimal(obj.value) + "(x" + formatDecimal(obj.increase) + ")")], new ExponentialCost(player.quarkstage.quarks, 1e32, 1e10), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu27", "[q28] Early Game Quarks", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.producers, 10, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Quark Production x" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, 1e8), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu28", "[q29] Early Game Electrons", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.electrify, 10, EffectTypes.PrestigeMultiplicativeGain, null, (obj) => "Electron Gain x" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, 1e32), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu29", "[q30] Buff dem Acceleration Boost", 10000, [new AchievementRequirement("1nucleonize")], [new LinearEffect(player.quarkstage.upgrades[4], 0, 1, EffectTypes.UpgradeIncreaseAddition, null, (obj) => "Base Acceleration Boost Power +" + formatDecimalNormal(obj.value) + "(+" + formatDecimalNormal(obj.increase) + ")")], new ExponentialCost(player.quarkstage.quarks, "1e100", "2"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu30", "[q31] Buff dem Multiplication Boost", 10, [new AchievementRequirement("1nucleonize")], [new LinearEffect(player.quarkstage.upgrades[9], 0, 1, EffectTypes.UpgradeIncreaseAddition, null, (obj) => "Base Multiplication Boost Power +" + formatDecimalNormal(obj.value) + "(+" + formatDecimalNormal(obj.increase) + ")")], new ExponentialCost(player.quarkstage.quarks, "1e300", "1e50"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu31", "[q32] Great Quark Gain Buff", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.producers, 1.1, EffectTypes.ProducerExponentialProduction, null, (obj) => "Quark Production ^" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e450"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu32", "[q33] Great Electron Gain Buff", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.electrify, 1.05, EffectTypes.PrestigeExponentialGain, null, (obj) => "Electron Gain ^" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e900"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu33", "[q34] Great Quark Spin Gain Buff", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.electronstage.quarkspinproducers, 1.25, EffectTypes.ProducerExponentialProduction, null, (obj) => "Quark Spin Production ^" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e600"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu34", "[q35] Buff dem Quark Producers", "1e100", [new AchievementRequirement("1nucleonize")], [new LinearEffect(player.quarkstage.producers, 0, 1, EffectTypes.ProducerBaseProduction, null, (obj) => "Base Quark Production +" + formatDecimalNormal(obj.value) + "(+" + formatDecimalNormal(obj.increase) + ")")], new ExponentialCost(player.quarkstage.quarks, "1e1200", "1.1"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu35", "[q36] Uh just a little Quark Production", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.producers, 1e25, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Quark Production *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e2500"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu36", "[q37] I love dem electrons", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.electrify, 1e15, EffectTypes.PrestigeMultiplicativeGain, null, (obj) => "Electron Gain *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e10000"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu37", "[q38] Yep Quark Spin sorta helps", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.electronstage.quarkspinproducers, 1e35, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Quark Spin Production *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e5000"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu38", "[q39] Charger Production Boost Again?", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.producers[0], 1e100, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Charger Production *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e12000"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu39", "[q40] Spinner Production Boost Again?", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.producers[1], 1e100, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Spinner Production *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e14000"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu40", "[q41] Flipper Production Boost Again?", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.producers[2], 1e100, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Flipper Production *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e16000"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu41", "[q42] Charmer Production Boost Again?", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.producers[3], 1e100, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Charmer Production *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e18000"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu42", "[q43] Eightfold Way Production Boost Again?", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.producers[4], 1e100, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Eightfold Way Production *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e20000"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu43", "[q44] George Production Boost Again?", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.producers[5], 1e100, EffectTypes.ProducerMultiplierProduction, null, (obj) => "George Production *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e22000"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu44", "[q45] Murray Production Boost Again? (First 5 to dm me the longest word in english language gets inspective role in discord)", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.producers[6], 1e100, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Murray Production *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e24000"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu45", "[q46] Epoch Production Boost Again?", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.producers[7], 1e100, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Epoch Production *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e26000"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu46", "[q47] Scattering Production Boost Again?", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.producers[8], 1e100, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Scattering Production *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e28000"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu47", "[q48] Big Bang Production Boost Again?", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.producers[9], 1e100, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Big Bang Production *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e30000"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu48", "[q49] Lets just increase that challenge score farther", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect([player.challenges[0], player.challenges[1], player.challenges[2], player.challenges[3]], 1e25, EffectTypes.ChallengeScoreMult, null, (obj) => "Challenges 1-4 Score *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e2500"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu49", "[q50] Challenges Boost Progress", 100, [new AchievementRequirement("1nucleonize")], [new ExponentialEffect(getchallenges(0,9), 1, 1.25, EffectTypes.ChallengeScoreMult, null, (obj) => "Challenges 1-8 Score *" + formatDecimalNormal(obj.value) + "(*" + formatDecimalNormal(obj.increase) + ")")], new ExponentialCost(player.quarkstage.quarks, "1e40000", 1e100), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu50", "[q51] Free Electrons want some love", 100, [new AchievementRequirement("1nucleonize")], [new LinearEffect(player.nucleonstage.freelectronproducers, 2.5, .1, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Free Electron Production *" + formatDecimalNormal(obj.value) + "(*" + formatDecimalNormal(obj.increase) + ")")], new ExponentialCost(player.quarkstage.quarks, "1e45000", 1e100), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu51", "[q52] Gluon, more like Glue-Off", 100, [new AchievementRequirement("1nucleonize")], [new LinearEffect(player.nucleonstage.gluonproducers, 2.5, .1, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Gluon Production *" + formatDecimalNormal(obj.value) + "(*" + formatDecimalNormal(obj.increase) + ")")], new ExponentialCost(player.quarkstage.quarks, "1e50000", 2), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu52", "[q53] Put the Electron in Charge", 100, [new AchievementRequirement("1nucleonize")], [new LinearEffect(player.nucleonstage.electronchargeproducers, 2.5, .1, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Electron Charge Production *" + formatDecimalNormal(obj.value) + "(*" + formatDecimalNormal(obj.increase) + ")")], new ExponentialCost(player.quarkstage.quarks, "1e55000", 1e100), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu53", "[q54] Quarks amma Right?", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.producers, 1e250, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Quark Production *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e75000"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu54", "[q55] Comfy Cozy, Electrons", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.quarkstage.electrify, 1e100, EffectTypes.PrestigeMultiplicativeGain, null, (obj) => "Electron Gain *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e100000"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu55", "[q56] Does quark Spin Even Work", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(player.electronstage.quarkspinproducers, 1e125, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Quark Spin Production *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e85000"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu56", "[q57] Challenges for the win", 1, [new AchievementRequirement("1nucleonize")], [new StaticEffect(getchallenges(0,9), 1e10, EffectTypes.ChallengeScoreMult, null, (obj) => "Challenges 1-8 Score *" + formatDecimalNormal(obj.value))], new StaticCost(player.quarkstage.quarks, "1e100000"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu57", "[q58] Buff dem Acceleration Boost", 10000, [new AchievementRequirement("1nucleonize")], [new LinearEffect(player.quarkstage.upgrades[4], 0, 10, EffectTypes.UpgradeIncreaseAddition, null, (obj) => "Base Acceleron Power +" + formatDecimalNormal(obj.value) + "(+" + formatDecimalNormal(obj.increase) + ")")], new ExponentialCost(player.quarkstage.quarks, "1e125000", "1e10"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu58", "[q59] Buff dem Multiplication Boost", 1000, [new AchievementRequirement("1nucleonize")], [new LinearEffect(player.quarkstage.upgrades[9], 0, 1, EffectTypes.UpgradeIncreaseAddition, null, (obj) => "Base Multor Power +" + formatDecimalNormal(obj.value) + "(+" + formatDecimalNormal(obj.increase) + ")")], new ExponentialCost(player.quarkstage.quarks, "1e200000", "1e100"), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu59", "[q60] Electron Gain Multiplier based on time this electrify.", "1", [new AchievementRequirement("1nucleonize")], [new FunctionEffect(player.quarkstage.electrify, EffectTypes.PrestigeMultiplicativeGain, () => timebonus(player.stats?.times ? Decimal.pow(Date.now() - player.stats?.times["electrify"], 10) : 1), (obj) => "Electron Gain *" + formatDecimalOverride(obj.value,2))], [new StaticCost(player.quarkstage.quarks, "1e250000")], "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu60", "[q61] Quarks!!", 10000, [new AchievementRequirement("1nucleonize")], new ExponentialEffect(player.quarkstage.producers, 1, 1.05, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Quark Production x" + formatDecimalNormal(obj.value) + "(x" + formatDecimalNormal(obj.increase) + ")"), new ExponentialCost(player.quarkstage.quarks, "1e300000", 1e250), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu61", "[q62] Quark Spin!!", 10000, [new AchievementRequirement("1nucleonize")], new ExponentialEffect(player.quarkstage.producers, 1, 1.03, EffectTypes.ProducerMultiplierProduction, null, (obj) => "Quark Spin Production x" + formatDecimalNormal(obj.value) + "(x" + formatDecimalNormal(obj.increase) + ")"), new ExponentialCost(player.quarkstage.quarks, "1e400000", 1e250), "upg"));
    player.quarkstage.singletonupgrades.push(new Upgrade("qsu62", "[q63] Electrons!!", 10000, [new AchievementRequirement("1nucleonize")], new ExponentialEffect(player.quarkstage.electrify, 1, 1.01, EffectTypes.PrestigeMultiplicativeGain, null, (obj) => "Electron Gain x" + formatDecimalNormal(obj.value) + "(x" + formatDecimalNormal(obj.increase) + ")"), new ExponentialCost(player.quarkstage.quarks, "1e500000", 1e250), "upg"));
}

function resetQuarkStage(hard){
  player.quarkstage.quarks.reset();
  player.quarkstage.producers.forEach((prod, i) => {
    prod.reset(hard);
  });
  player.quarkstage.upgrades.forEach((upgrade, i) => {
    upgrade.reset(hard);
  });
  player.quarkstage.singletonupgrades.forEach((upgrade, i) => {
    upgrade.reset();
  });
  updateeffects();
}