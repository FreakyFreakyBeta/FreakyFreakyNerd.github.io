function setupQuarkStage(){
  player.quarkstage.quarks = new Currency("quark", "Quarks", "Quark", 10);
  player.quarkstage.producers = [];
  player.quarkstage.producers.push(new Producer("quarkgenone",     "Charger",  [new ExponentialCost(player.quarkstage.quarks, "10", 1.1)],        [new LinearProduction(player.quarkstage.quarks, "1")]  , null , "quarkgen"));
  player.quarkstage.producers.push(new Producer("quarkgentwo",     "Spinner",  [new ExponentialCost(player.quarkstage.quarks, "1e2", 1.1)],       [new LinearProduction(player.quarkstage.quarks, "9")]  , [new AchievementRequirement("10quarkgenone")], "quarkgen"));
  player.quarkstage.producers.push(new Producer("quarkgenthree",   "Flipper",  [new ExponentialCost(player.quarkstage.quarks, "2.5e3", 1.1)],     [new LinearProduction(player.quarkstage.quarks, "225")], [new AchievementRequirement("10quarkgentwo")], "quarkgen"));
  player.quarkstage.producers.push(new Producer("quarkgenfour",    "Charmer",  [new ExponentialCost(player.quarkstage.quarks, "1e6", 1.1)],       [new LinearProduction(player.quarkstage.quarks, "8e4")], [new AchievementRequirement("10quarkgenthree")], "quarkgen"));
  player.quarkstage.producers.push(new Producer("quarkgenfive",    "Eightfold Way",  [new ExponentialCost(player.quarkstage.quarks, "1e9", 1.1)], [new LinearProduction(player.quarkstage.quarks, "5e7")], [new AchievementRequirement("10quarkgenfour")], "quarkgen"));
  player.quarkstage.producers.push(new Producer("quarkgensix",     "George",  [new ExponentialCost(player.quarkstage.quarks, "1e13", 1.1)],       [new LinearProduction(player.quarkstage.quarks, "1e11")], [new AchievementRequirement("10quarkgenfive")], "quarkgen"));
  player.quarkstage.producers.push(new Producer("quarkgenseven",   "Murray",  [new ExponentialCost(player.quarkstage.quarks, "1e20", 1.1)],       [new LinearProduction(player.quarkstage.quarks, "1e13")],[new AchievementRequirement("10quarkgensix")], "quarkgen"));
  player.quarkstage.producers.push(new Producer("quarkgeneight",   "Epoch",  [new ExponentialCost(player.quarkstage.quarks, "1e40", 1.1)],        [new LinearProduction(player.quarkstage.quarks, "1e21")],[new AchievementRequirement("10quarkgenseven")], "quarkgen"));
  player.quarkstage.producers.push(new Producer("quarkgennine",    "Scattering",  [new ExponentialCost(player.quarkstage.quarks, "1e75", 1.1)],   [new LinearProduction(player.quarkstage.quarks, "1e24")],[new AchievementRequirement("10quarkgeneight")], "quarkgen"));
  player.quarkstage.producers.push(new Producer("quarkgenten",     "Big Bang", [new ExponentialCost(player.quarkstage.quarks, "1e120", 1.1)],       [new LinearProduction(player.quarkstage.quarks, "1e30")],[new AchievementRequirement("10quarkgennine")], "quarkgen"));

  player.quarkstage.upgrades = [];
  //Acceleron Tree
  player.quarkstage.upgrades.push(new Upgrade("qu0", "Acceleron", -1, [new AchievementRequirement("100quarkgenone")], [new LinearEffect(player.quarkstage.producers, 1, .1, EffectTypes.ProducerMultiplierProduction, null, (obj) => {return "Acceleron Power: +" + formatDecimalOverride(obj.increase, 2) + " || Quark Gain: x" + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,100,2)], "quarkupg"));
  player.quarkstage.upgrades.push(new Upgrade("qu1", "Accelerator", -1, [new NumRequirement(player.quarkstage.producers[1],25)], [new LinearEffect(player.quarkstage.upgrades[0], 1, .01, EffectTypes.UpgradeIncreaseMultiplier, null, (obj) => {return "Accelerator Power: +" + formatDecimalOverride(obj.increase, 2) + " || Acceleron Power: x" + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e5,2)], "quarkupg"));
  player.quarkstage.upgrades.push(new Upgrade("qu2", "Acceleratron", -1, [new NumRequirement(player.quarkstage.upgrades[1],10)], [new LinearEffect(player.quarkstage.upgrades[1], 1, .01, EffectTypes.UpgradeIncreaseMultiplier, null, (obj) => {return "Acceleratron Power: +" + formatDecimalOverride(obj.increase, 2) + " || Accelerator Power: x" + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e7,4)], "quarkupg"));
  player.quarkstage.upgrades.push(new Upgrade("qu3", "Acceleration", -1, [new NumRequirement(player.quarkstage.upgrades[2],10)], [new LinearEffect(player.quarkstage.upgrades[2], 1, .01, EffectTypes.UpgradeIncreaseMultiplier, null, (obj) => {return "Acceleration Power: +" + formatDecimalOverride(obj.increase, 2) + " || Acceleratron Power: x" + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e10,15)], "quarkupg"));
  player.quarkstage.upgrades.push(new Upgrade("qu4", "Acceleration Boost", -1, [new NumRequirement(player.quarkstage.upgrades[3],10)], [new LinearEffect(player.quarkstage.upgrades[0], 0, 5, EffectTypes.UpgradeBonusLevels, null, (obj) => {return "Acceleration Boost Power: +" + formatDecimalOverride(obj.increase, 2) + " || Free Accelerons: " + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e12,100)], "quarkupg"));

  //Multor Tree
  player.quarkstage.upgrades.push(new DiminishingUpgrade("qu5", "Multor", -1, [new AchievementRequirement("100quarkgentwo")], [new ExponentialEffect(player.quarkstage.producers, 1, 1.1, EffectTypes.ProducerMultiplierProduction, null, (obj) => {return "Multor Power: x" + formatDecimalOverride(obj.increase, 2) + " || Quark Gain: x" + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e5,10)], "quarkupg", new Decimal(1000), (num) => {return Decimal.pow(Decimal.log(num,5),3)}));
  player.quarkstage.upgrades.push(new DiminishingUpgrade("qu6", "Multron", -1, [new NumRequirement(player.quarkstage.upgrades[4],10)], [new LinearEffect(player.quarkstage.upgrades[5], 1, .01, EffectTypes.UpgradeIncreaseMultiplier, null, (obj) => {return "Multron Power: +" + formatDecimalOverride(obj.increase, 2) + " || Multor Power: x" + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e55,125)], "quarkupg", new Decimal(1000), (num) => {return Decimal.pow(Decimal.log(num,5),3)}));
  player.quarkstage.upgrades.push(new DiminishingUpgrade("qu7", "Multiplier", -1, [new NumRequirement(player.quarkstage.upgrades[4],10)], [new LinearEffect(player.quarkstage.upgrades[6], 1, .01, EffectTypes.UpgradeIncreaseMultiplier, null, (obj) => {return "Mutiplier Power: +" + formatDecimalOverride(obj.increase, 2) + " || Multron Power: x" + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e80,250)], "quarkupg", new Decimal(1000), (num) => {return Decimal.pow(Decimal.log(num,5),3)}));
  player.quarkstage.upgrades.push(new DiminishingUpgrade("qu8", "Multiplication", -1, [new NumRequirement(player.quarkstage.upgrades[4],10)], [new LinearEffect(player.quarkstage.upgrades[7], 1, .01, EffectTypes.UpgradeIncreaseMultiplier, null, (obj) => {return "Multiplication Power: +" + formatDecimalOverride(obj.increase, 2) + " || Multiplier Power: x" + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e120,250)], "quarkupg", new Decimal(1000), (num) => {return Decimal.pow(Decimal.log(num,5),3)}));
  player.quarkstage.upgrades.push(new DiminishingUpgrade("qu9", "Multiplication Boost", -1, [new NumRequirement(player.quarkstage.upgrades[4],10)], [new LinearEffect(player.quarkstage.upgrades[5], 0, 5, EffectTypes.UpgradeBonusLevels, null, (obj) => {return "Multiplication Boost Power: +" + formatDecimalOverride(obj.increase, 2) + " || Free Multors: " + formatDecimalOverride(obj.value, 2)})], [new ExponentialCost(player.quarkstage.quarks,1e16,250)], "quarkupg", new Decimal(1000), (num) => {return Decimal.pow(Decimal.log(num,5),3)}));
}

function resetQuarkStage(){
  player.quarkstage.quarks.reset();
  player.quarkstage.producers.forEach((prod, i) => {
    prod.reset();
  });
  player.quarkstage.upgrades.forEach((upgrade, i) => {
    upgrade.reset();
  });
}
